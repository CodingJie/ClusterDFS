#!/usr/bin/env python
from __future__ import division

import numpy
import random
import logging
import logging.config
import operator
import itertools

from clusterdfs.galoisbuffer import GaloisBuffer, inverse_val
from clusterdfs.bufferedio import InputStreamReader
from clusterdfs.coding import *

logging.config.fileConfig("./bin/datanode_logger.conf")

def prod(it):
    return reduce(operator.mul, it)

types = {8: numpy.uint8, 16: numpy.uint16, 32: numpy.uint32}

class Test(object):
    def __init__(self, n, k, bitfield=16):
        self.k = k
        self.n = n
        self.bitfield = bitfield

        if bitfield not in [8,16,32]:
            raise ValueError("bitfield should be 8, 16 or 32")

        # initial replicas
        self.replicas = [[] for i in xrange(self.n)]
        self.remove = [[] for i in xrange(self.n)]
        offset = int((self.n-self.k)/2)
        for i in xrange(self.k):
            self.replicas[i].append(i)
            #self.replicas[i+offset].append(i)
            self.remove[self.n-self.k+i].append(i)

        # create and initialize the coefficients of parts
        self.parts = [numpy.zeros(k, dtype=types[self.bitfield]) for i in xrange(self.k)]
        self.parts_galois = [GaloisBuffer(k*self.bitfield/8, buffer=p.data, bitfield=self.bitfield) for p in self.parts]
        for i,p in enumerate(self.parts):
            p[i] = 1

        random.seed(0)
        self.stream_coeff = [self.get_coefficient() for i in xrange(self.n*self.k)]
        self.local_coeff = [self.get_coefficient() for i in xrange(self.n*self.k)]
        self.stream_coeff_i = iter(self.stream_coeff)
        self.local_coeff_i = iter(self.local_coeff)

    def get_coefficient(self):
        v = random.randrange(1, 1<<self.bitfield)
        assert v!=0
        return v

    def get_node_addr(self, i):
        return ('thinclient-%02d'%(i),7777)

    def get_part_uri(self, i):
        return 'girl.64mb.part%d'%(i)

    def get_coded_uri(self, i):
        return 'girl.64mb.coded'
        
    def get_decoded_uri(self, i):
        return 'decoded%d'%(i)

    def coding(self):
        stream = numpy.zeros(self.k, dtype=types[self.bitfield])
        stream_galois = GaloisBuffer(self.k*self.bitfield/8, buffer=stream.data, bitfield=self.bitfield)

        nodes = []
        polys = []
        prev_node = None
        for i in xrange(self.n):
            buffers = [(self.get_part_uri(j), 'r') for j in itertools.chain(self.replicas[i], self.remove[i])]
            buffers.append((self.get_coded_uri(i), 'w'))
            if prev_node!=None:
                buffers.append(prev_node)

            new = NetCodingOperations(self.get_node_addr(i), buffers, 'output' if i!=(self.n-1) else None)
            nodes.append(new)

            for j in itertools.chain(self.replicas[i], self.remove[i]):
                new.add('LOAD', 'buff%d'%j, self.get_part_uri(j))

            if i==0:
                self.parts_galois[j].multadd(1, dest=stream_galois, add=True)
            else:
                new.add('LOAD', 'input', prev_node)
                if i!=self.n-1:
                    for j in self.remove[i]:
                        new.add('MULADD', 'input', int(stream[j]), 'buff%d'%j)
                        self.parts_galois[j].multadd(int(stream[j]), dest=stream_galois, add=True)
           
            pivot = 'input' if i!=0 else 'buff0'

            if i!=self.n-1:
                new.add('COPY', 'output', pivot)
                if i!=0:
                    for j in self.replicas[i]:
                        v = next(self.stream_coeff_i)
                        new.add('MULADD', 'output', v, 'buff%d'%j)
                        self.parts_galois[j].multadd(v, dest=stream_galois, add=True)

            if i==0:
                polys.append(self.parts[0][:])
            else:
                store_galois = stream_galois*1
                for j in itertools.chain(self.replicas[i], self.remove[i]):
                    val = next(self.local_coeff_i)
                    new.add('MULADD', 'input', val, 'buff%d'%j)
                    self.parts_galois[j].multadd(val, dest=store_galois, add=True)
                polys.append(store_galois.buff)

            new.add('WRITE', pivot, self.get_coded_uri(i))
            prev_node = new
        return nodes, polys

    def decoding(self):
        stream = numpy.zeros(self.k, dtype=types[self.bitfield])
        stream_galois = GaloisBuffer(self.k*self.bitfield/8, buffer=stream.data, bitfield=self.bitfield)

        coding_nodes, polys = self.coding()

        nodes = []
        prev_node = None

        buffers = [(self.get_coded_uri(0), 'r')]
        new = NetCodingOperations(self.get_node_addr(0), buffers, 'output')
        new.add('LOAD','buff',self.get_coded_uri(0))
        new.add('COPY','output','buff')
        nodes.append(new)

        for i in xrange(1,self.k):
            buffers = [(self.get_coded_uri(i), 'r'), (self.get_decoded_uri(i), 'w')]
            new = NetCodingOperations(self.get_node_addr(i), buffers, 'output' if i!=self.k-1 else None)
            new.add('LOAD', 'input', prev_node)
            new.add('LOAD', 'buff', self.get_coded_uri(i))
            new.add('MULADD', 'output', inverse_val(int(polys[i][i]), bitfield=self.bitfield), 'buff')
            new.add('MULADD', 'output', inverse_val(int(polys[i][i-1]), bitfield=self.bitfield), 'input')
            new.add('WRITE', 'output', self.get_decoded_uri(i))
            nodes.append(new)
        
        return nodes

numpy.set_printoptions(linewidth=150)
t = Test(16, 11, bitfield=8)
nodes, polys = t.coding()
for node,poly in itertools.izip(nodes, polys):
    for i in node.instructions:
        print i
    print poly
    print ''
#print '----~~~-~~-~~-~~~-~~~-~~-~~'
#nodes = t.decoding()
#for n in nodes:
#    for i in n.instructions:
#        print i
#    print ''
remote = RemoteNetCoding(nodes[-1])
remote.execute()
