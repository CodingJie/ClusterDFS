#!/usr/bin/env python
from __future__ import division
import os
import sys
import platform
sys.path.append(os.getcwd())
if platform.architecture()==('32bit', 'ELF'):
    sys.path.append(os.getcwd()+'/lib/')
elif platform.architecture()==('64bit', 'ELF'):
    sys.path.append(os.getcwd()+'/lib64/')
else:
    raise OSError('Platform is not supported.')

import logging
import argparse

from clusterdfs.processname import setprocname
from clusterdfs.datanode import DataNodeConfig, DataNode

if __name__ == '__main__':
    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)
    h = logging.StreamHandler() 
    h.setFormatter(logging.Formatter("%(levelname)s: %(name)s - %(message)s"))
    logger.addHandler(h)

    if '--optimize' in sys.argv:
        logging.info('Running optimized version!')
        sys.argv.remove('--optimize')
        os.execl(sys.executable, sys.executable, '-O', *sys.argv)
    else:
        if not setprocname():
            logging.error('Cannot change the process for %s.', __file__)

        parser = argparse.ArgumentParser(description='DataNode')
        parser.add_argument('-d', action="store", default=None, dest="datadir", type=str, help="Directory to store raw data.")
        parser.add_argument('-l', action="store", default="0.0.0.0", dest="bind_addr", type=str, help="DataNode binding address.")
        parser.add_argument('-p', action="store", default=None, dest="port", type=int, help="Port where DataNode listens.")
        parser.add_argument('-na', action="store", default='localhost', dest="namenode_addr", type=str, help="Address of the NameNode.")
        parser.add_argument('-np', action="store", default=7770, dest="namenode_port", type=int, help="Port of the NameNode.")
        parser.add_argument('-i', action="store", default=False, dest="isolated", type=bool, help="Should the data node work without namenode.")
        parser.add_argument('-f', action="store", default=False, dest="fakeout", type=bool, help="When set all new blocks are stored to /dev/null.")
        config = DataNodeConfig.from_args(parser.parse_args())

        try:
            dn = DataNode(config)
            dn.init()
            dn.finalize()
        except KeyboardInterrupt:
            logging.info("Finalizing DataNode...")
            dn.finalize()
        except Exception:
            logging.error("Fatal Error!!")
            raise
